<!DOCTYPE html>
<html lang="en">
<head>
    <title>User Stats</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@200..900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/spryntax.css">
    <script src="/jquery-3.7.1.min.js"></script>
</head>
    <%
    function formatTime(seconds) {
        const hrs = Math.floor(seconds / 3600);
        const mins = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        return hrs + "h " + mins + "m " + secs + "s";
    }
    %>
<body>
    <header>
        <div class="nav-container">
          <nav>
            <div class="nav-left">
              <a href="/" class="logo <%= activePage === 'home' ? 'active' : '' %>" data-gradient="linear-gradient(130deg, cyan, cyan)">Spryntax</a>
              <a href="/level_select" class="<%= activePage === 'level_select' ? 'active' : '' %>" data-gradient="linear-gradient(130deg, cyan, lime)">Level Select</a>
              <a href="/favorites" class="<%= activePage === 'favorites' ? 'active' : '' %>" data-gradient="linear-gradient(130deg, rgb(43, 255, 0), rgb(247, 255, 4))">Favorites</a>
              <a href="/stats" class="<%= activePage === 'stats' ? 'active' : '' %>" data-gradient="linear-gradient(130deg, rgb(247, 255, 4), rgb(255, 132, 0))">Stats</a>
              <a href="/leaderboard" class="<%= activePage === 'leaderboard' ? 'active' : '' %>" data-gradient="linear-gradient(130deg, rgb(255, 132, 0), rgb(255, 0, 0))">Leaderboard</a>
              <a href="/report" class="<%= activePage === 'report' ? 'active' : '' %>" data-gradient="linear-gradient(130deg, rgb(255, 0, 0), rgb(255, 0, 208))">Report</a>
            </div>
            <div class="nav-right">
              <a href="/settings" class="<%= activePage === 'settings' ? 'active' : '' %>" data-gradient="linear-gradient(130deg, rgb(255, 0, 208), rgb(81, 0, 255))">Settings</a>
              <% if (username && username !== 'undefined') { %>
                <a href="#" class="<%= activePage === 'profile' ? 'active' : '' %>" data-gradient="linear-gradient(130deg, rgb(81, 0, 255), rgb(0, 247, 255))">Welcome <%= username %>!</a>
              <% } else { %>
                <a href="/signup" data-gradient="linear-gradient(130deg, rgb(81, 0, 255), rgb(0, 247, 255))">Sign up</a>
                <a href="/login" data-gradient="linear-gradient(130deg, rgb(81, 0, 255), rgb(0, 247, 255))">Log in</a>
              <% } %>
            </div>
            <div id="indicator"></div>
          </nav>
        </div>
    </header>


    <h1 class="gradient-text" data-text="User Statistics">User Statistics</h1>

    <div class="gray-background" style="padding: 20px; margin: 20px;">
      <% if (!stats) { %>
        <!-- Not logged in -->
        <div class="gradient-text" style="padding: 20px; text-align: center; font-size: 2rem;">
            Sign up or log in to save statistics.
        </div>
      <% } else { %>
        <!-- Profile Header -->
        <div class="profile-header" style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap;">
          <div class="profile-info">
            <h2><%= username %></h2>
          </div>
          <div class="profile-stats">
            <p>Tests Completed: <%= profileHeader.tests_completed %></p>
            <p>Time Typed: <%= formatTime(profileHeader.total_time_spent) %></p>
          </div>
        </div>
        
        <div class="gray-background" style="padding: 20px; margin: 20px;">
            <h2 style="text-align: center;">Daily Test Activity</h2>
          
            <%
              // 1) Build a JS date for "today" and "365 days ago"
              const today = new Date();
              const oneYearAgo = new Date();
              oneYearAgo.setDate(oneYearAgo.getDate() - 365);
          
              // 2) Convert dailyStats array into a quick lookup: { 'YYYY-MM-DD': count, ... }
              const statsMap = {};
              dailyStats.forEach(row => {
                // row.date might be a Date object or a string - ensure it's a Date
                const isoDate = row.date.toISOString().slice(0, 10);
                statsMap[isoDate] = row.tests_done;
              });
          
              let current = new Date(oneYearAgo);
              let colCount = 0;
              let colDates = []; // store the date at the start of each column
            %>
          
            <div class="heatmapWrapper">
              <!-- LEFT DAY LABELS (7 rows: Sunday->Saturday) -->
              <div class="daysFull">
                <div><div class="text">Sun</div></div>
                <div><div class="text">Mon</div></div>
                <div><div class="text">Tue</div></div>
                <div><div class="text">Wed</div></div>
                <div><div class="text">Thu</div></div>
                <div><div class="text">Fri</div></div>
                <div><div class="text">Sat</div></div>
              </div>
          
              <!-- 53 columns x 7 rows grid -->
              <div class="weeks">
                <% 
                  // Outer loop for columns (weeks)
                  while (current <= today && colCount < 53) {
                    const columnStartDate = new Date(current);
                    colDates.push(columnStartDate); // track the start date of this column
                %>
                  <div class="week">
                    <% 
                      // Inner loop: 7 days (Sun->Mon->Tue->Wed->Thu->Fri->Sat)
                      for (let wDay = 0; wDay < 7; wDay++) {
                        if (current > today) break;
          
                        const dateKey = current.toISOString().slice(0,10);
                        const count = statsMap[dateKey] || 0;
          
                        // Determine color level
                        let level = 0;
                        if (count > 0) level = 1;
                        if (count > 2) level = 2;
                        if (count > 5) level = 3;
                        if (count > 10) level = 4;
          
                        // Tooltip message
                        const tooltipMsg = `${count} tests on ${current.toDateString()}`;
                    %>
                      <div class="day day-level-<%= level %>"
                           data-tooltip="<%= tooltipMsg %>">
                      </div>
                    <%
                        // Next day
                        current.setDate(current.getDate() + 1);
                      } // end for (7 days)
                    %>
                  </div>
                <%
                  colCount++;
                  } // end while (53 columns)
                %>
              </div>
            </div>
          
            <!-- Bottom month labels -->
            <div class="months">
              <% for (let i = 0; i < colDates.length; i++) {
                  const colDate = colDates[i];
                  if (colDate.getDate() === 1 || i === 0 || colDate.getMonth() !== colDates[i-1]?.getMonth()) {
                    const monthName = colDate.toLocaleString('en', { month: 'short' });
              %>
                <div class="monthLabel" style="grid-column: <%= i+1 %> / <%= i+2 %>">
                  <%= monthName %>
                </div>
              <% } } %>
            </div>

          </div>
          
          <!-- Custom tooltip JS -->
          <script>
            document.addEventListener('DOMContentLoaded', function() {
              const days = document.querySelectorAll('.day');
              // Create a tooltip element
              const tooltip = document.createElement('div');
              tooltip.className = 'custom-tooltip';
              tooltip.style.display = 'none';
              document.body.appendChild(tooltip);
          
              days.forEach(day => {
                day.addEventListener('mouseenter', e => {
                  const msg = day.getAttribute('data-tooltip');
                  if (msg) {
                    tooltip.textContent = msg;
                    tooltip.style.display = 'block';
                    tooltip.style.left = (e.pageX + 10) + 'px';
                    tooltip.style.top = (e.pageY + 10) + 'px';
                  }
                });
                day.addEventListener('mousemove', e => {
                  tooltip.style.left = (e.pageX + 10) + 'px';
                  tooltip.style.top = (e.pageY + 10) + 'px';
                });
                day.addEventListener('mouseleave', () => {
                  tooltip.style.display = 'none';
                });
              });
            });
          </script>


      <% } %>
    </div>
      
    

</body>
</html>
